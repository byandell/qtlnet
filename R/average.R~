qtlnet.average <- function(qtlnet.object, burnin = 0)
{
  list(mav = get.model.average(qtlnet.object),
       pp = qet.posterior.prob(qtlnet.object))
}
##########################################################################
get.model.average <- function(qtlnet.object)
{
  mav <- qtlnet.object$Mav
  if(is.null(mav)) {
    nSamples <- attr(qtlnet.object, "nSamples")
    post.burnin <- which(apply(matrix(nSamples), 1,
                               function(x,b) seq(x) >= b * x, burnin))

    mav <- apply(qtlnet.object$post.net.str[,,post.burnin], c(1,2), mean)
    pheno.names <- attr(qtlnet.object, "pheno.names")
    dimnames(mav) <- list(pheno.names, pheno.names)
  }
  mav
}
##########################################################################
get.posterior.prob <- function(qtlnet.object)
{
  nSamples <- attr(qtlnet.object, "nSamples")
  post.burnin <- which(apply(matrix(nSamples), 1,
                             function(x,b) seq(x) >= b * x, burnin))

  post.model <- qtlnet.object$post.model[post.burnin]
  post.bic <- qtlnet.object$post.bic[post.burnin]
  
  out <- data.frame(post.prob = as.vector(table(post.model)) / length(post.model),
               BIC  = tapply(post.bic, post.model, mean))
  out[order(-out$post.prob, out$BIC),]
}
##########################################################################
## Need to condense qtlnet object.
## First, get rid of post.net.str.
## Could have utility to translate post.model to post.net.str.
##########################################################################
model2M <- function(post.model)
{
  ## Convert post.model into 3-D M array.
  
  ## Strip out parentheses and split by node.
  a <- strsplit(substring(model, 2, nchar(model) - 1), ")(", fixed = TRUE)
  nSamples <- length(a)
  n.pheno <- length(a[[1]])
  phenos <- rep(0, n.pheno)
  asplit <- function(a, phenos = length(a)) {
    a1 <- strsplit(a, "|", fixed = TRUE)
    a2 <- sapply(a1, function(x, phenos)
                 {
                   if(length(x) == 2) {
                     xx <- as.numeric(strsplit(x[2], ",", fixed = TRUE)[[1]])
                     phenos[xx] <- 1
                   }
                   phenos
                 }, phenos)
    a2
  }
  array(unlist(lapply(a, asplit, phenos)), c(n.pheno, n.pheno, nSamples))
}
