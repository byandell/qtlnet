loci.qtlnet <- function(qtlnet.object, chr.pos=TRUE, ...)
{
  cross <- qtlnet.object$cross
  ## Make sure cross object has genotype probabilities.
  if (!("prob" %in% names(cross$geno[[1]]))) {
      warning("First running calc.genoprob.")
    cross <- calc.genoprob(cross)
  }

  pheno.net.str <- summary(qtlnet.object)$averaged.net

  ## Extract needed attributes from qtlnet.object.
  pheno.nms <- attr(qtlnet.object, "pheno.names")
  addcov <- attr(qtlnet.object, "addcov") 
  intcov <- attr(qtlnet.object, "intcov") 
  thr <- attr(qtlnet.object, "threshold")
  method <- attr(qtlnet.object, "method")

  le <- length(pheno.nms)
  QTLnodes <- list()
  for(i in 1:le){
    pa <- get.parents(pheno=pheno.nms[i], pheno.net.str=pheno.net.str)

    ## Reduce to nonmissing data.
    tmp <- unique(c(i, pa, addcov[[i]], intcov[[i]]))
    pheno.na <- apply(cross$pheno[, tmp, drop = FALSE], 1,
                      function(x) any(is.na(x)))
    crossi <- subset(cross, ind = !pheno.na)

    ## Determine parent covariates.
    pacov.dat <- NULL
    if(!is.null(pa))
      pacov.dat <- as.matrix(crossi$pheno[, pa, drop = FALSE])

    ## Determine additive and interactive covariates.
    addcov.dat <-
      create.cov.matrix(crossi, cov.names = unique(c(addcov[[i]], intcov[[i]])))
    addcov.dat <- cbind(pacov.dat, addcov.dat)
    intcov.dat <- create.cov.matrix(crossi, cov.names = intcov[[i]])
    
    ss <- scanone.summary(crossi, i, addcov.dat, intcov.dat, thr[[i]], method)

    markers <- row.names(ss)
    le.markers <- length(markers)
    if(le.markers > 0){ 
      if(chr.pos){
        QTLnodes[[i]] <- paste("chr", ss[,1], "@", round(ss[,2], 2), sep = "")
      }
      else{
        QTLnodes[[i]] <- markers
      }
    }
    if(le.markers == 0){
      QTLnodes[[i]] <- markers
    }   
  }
  names(QTLnodes) <- pheno.nms
  QTLnodes
}
######################################################################
get.parents <- function(pheno, pheno.net.str)
{
  aux1 <- which(pheno.net.str[,2] == pheno)
  pa <- pheno.net.str[pheno.net.str[,2] == pheno, 1]
  if(length(pa) == 0) return(NULL)
  else return(pa)
}
